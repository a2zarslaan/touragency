//bottom margin for everything except last child
.form {
  &__group:not(:last-child) {
    margin-bottom: 2rem;
  }

  &__input {
    font-size: 1.5rem;
    font-family: inherit;
    color: inherit;

    //it's a good practice to have the padding on the sides to be a bit larger than the padding on the top and bottom, as the side padding looks smaller even if its same as top and bottom due to human perception
    padding: 1.5rem 2rem;
    border-radius: 2px;
    background-color: rgba($color-white, 0.5);
    border: none;

    //the form name will move slightly when we focus on the element because the new bottom border of 3px that is introduced under the box will cause things to move down. To combat that, we'll add a transparent border of 3 px under the input box so that it is invisible initially and then becomes green later
    border-bottom: 3px solid transparent;
    width: 90%;
    display: block;

    // :focus pseudo class acts when the element is currently in focus
    &:focus {
      //this will remove the blue outline when the element is in focus. But just doing this is not enough. There could be people who are using the website without a mouse, and for them it will be difficult to tell whether their desired element is in focus. So we'll add a box shadow
      outline: none;
      box-shadow: 0 1rem 2rem rgba($color-black, 0.1);
      border-bottom: 3px solid $color-primary;
    }

    //this pseudo class with the invalid parameter works only when the input is invalid
    &:focus:invalid {
      border-bottom: 3px solid $color-secondary-dark;
    }

    //the following pseudo element works only on safari and chrome, and it is used to have some palceholder text inside the form box
    &::-webkit-input-placeholder {
      color: $color-grey-dark-2;
    }
  }

  &__label {
    font-size: 1.2rem;
    font-weight: 700;
    margin-left: 2rem;
    margin-top: 0.7rem;
    display: block;
    transition: all 0.3s;
  }

  //here we are using the adjacent sibling selector(+), just because the label is right after the input class. If it was not exactly after, we'd have used (~), which is the general sibling selector. Also, in order for these to work, the first element always has to come before the sibling in the HTML. Order is very important in sibling selector
  &__input:placeholder-shown + &__label {
    //we set opacity 0 and then visibility hidden because if we had set only the opacity to 0 the element would not be visible but would still stay at the same spot. On the other hand, if we just set the visibility to hidden, we won't be able to animate the visibility
    opacity: 0;
    visibility: hidden;
    transform: translateY(-4rem);
  }

  //for styling the radio buttons
  &__radio-group {
    //width is 49% because the buttons were not showing side by side probably due to padding when it was 50%
    width: 49%;
    display: inline-block;
  }

  //to hide the default radio button
  &__radio-input {
    display: none;
  }

  &__radio-label {
    font-size: $default-font-size;

    //to show a hand when the cursor is in the radio buttons
    cursor: pointer;
    position: relative;
    padding-left: 4.5rem;
  }

  //custom radio button
  &__radio-button {
    //same height and width for a circle
    height: 3rem;
    width: 3rem;

    border: 5px solid $color-primary;
    border-radius: 50%;

    //this will owrk only for block or inline block elements
    display: inline-block;

    //to position precisely
    position: absolute;
    left: 0;
    top: -0.4rem;

    &::after {
      //content property is compulsory whenever a pseudo element is used
      content: "";
      display: block;
      height: 1.3rem;
      width: 1.3rem;
      border-radius: 50%;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: $color-primary;
      opacity: 0;
      transition: opacity 0.2s;
    }
  }

  //using the sibling selector
  &__radio-input:checked ~ &__radio-label &__radio-button::after {
    opacity: 1;
  }
}

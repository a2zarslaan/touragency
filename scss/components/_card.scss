.card {
  //the effect of the card flipping and coming out of the screen is done because of the property called perspective. Whenever we add perspective we do it to the parent element. The lower the value, the more dramatic the perspective effect
  perspective: 150rem;
  //the following line enables this effect in mozilla firefox
  -moz-perspective: 150rem;

  //giving relative positioning to the parent to enable absolute positioning below
  position: relative;

  //the way the parent element collapses everytime all the children are floats, the same thing happends when all the children are in absolute position. But there is no fix for this the way it is for floats using clearfix. So we will just assign the card the same height as the __side elements below so that it doesn't collapse
  height: 52rem;

  &__side {
    //text properties
    font-size: 2rem;

    height: 52rem;
    transition: all 0.8s ease; //ease property just changes the flow of animation, to be discussed later in detail

    //by defult the card will be one below the other, but if we want to show different sides to the card, we will use absolute positioning and overlap them
    position: absolute;
    top: 0;
    left: 0;

    //by taking the steps above the cards will overlap each other but will have different widths according to the width of the text. to overcome this, we'll use width property
    width: 100%;

    //also, using the properties above the cards overlap but their backs are visible even after rotation. This is the first time we're actually using this property th eway it is meant to be used, this time it is not fixing an animaton, it will hide the back part of the card
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;

    //giving round edges and shadows
    border-radius: 3px;

    //because of the background image overflowing, these corners will not be rounded anymore once the background image is added. To prevent that from happening, we'll use the overflow property
    overflow: hidden;

    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15);

    &--front {
      background-color: $color-white;
    }

    //backside in the beginning is already rotated, that means it is already 180 degrees on the back, and as soon as we hover on the card, it moves to zero.
    &--back {
      //before we hover the card, this backside is already flipped
      transform: rotateY(180deg);

      &-1 {
        //adding linear gradient for the back of the card
        background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        );
      }

      &-2 {
        //adding linear gradient for the back of the card
        background-image: linear-gradient(
          to right bottom,
          $color-primary-light,
          $color-primary-dark
        );
      }

      &-3 {
        //adding linear gradient for the back of the card
        background-image: linear-gradient(
          to right bottom,
          $color-tertiary-light,
          $color-tertiary-dark
        );
      }
    }
  }

  //when we hover the card, the card__side will be transformed. We're not putting the hover here directly, on card__side (like this - &__side:hover) because later we will have more sides and we want this effect to take place when we're hovering on the card
  &:hover &__side--front {
    //only the front side will rotate 180 degrees as the backside is already rotated 180 degrees
    transform: rotateY(-180deg);
  }

  &:hover &__side--back {
    //backside was already at 180 degrees and now needs to be rotated back to 0
    transform: rotateY(0);
  }

  //adding picture below, front side styling
  &__picture {
    background-size: cover;

    //by default the image section will be very small as the blank space doesn't take more space than a line. Hence we'll have to define the height manually
    height: 23rem;

    //using background-blend-mode property to blend the two background images
    background-blend-mode: screen;

    //using clip path to create a small negative space triangle
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);

    //because of the clip path property we use, for some reason the overflow: hidden properrty stops working and thus the corners are not rounded anymore again, and to deal with that we need to manually define the rounded corners again.
    border-top-left-radius: 3px;
    border-top-right-radius: 3px;

    //adding webkit property so that clip path can work with most browsers, still won't work with internet explorer and microsoft edge
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);

    //card 1
    &--1 {
      background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        ),
        url(../img/nat-5.jpg);
    }

    //card 2
    &--2 {
      background-image: linear-gradient(
          to right bottom,
          $color-primary-light,
          $color-primary-dark
        ),
        url(../img/nat-6.jpg);
    }

    //card 3
    &--3 {
      background-image: linear-gradient(
          to right bottom,
          $color-tertiary-light,
          $color-tertiary-dark
        ),
        url(../img/nat-7.jpg);
    }
  }

  //heading
  &__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: $color-white;
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 75%;
  }

  //according to BEM system, heading-span is a new element so we will not nest it inside the __heading above
  &__heading-span {
    padding: 1rem 1.5rem;

    //currently the element is treated as one line of text so the padding is applied on the left of "the" and the right of "explorer" in "the sky explorer" heading. When it is broken into 2 lines using a smaller width percentage (75%) as done above, the padding makes the design look odd and unevenly spaced. To prevent that, we are using box-decoration-break property. box-decoration-break treats the two line in the heading as two separate elements, and thus the left and right paddings are applied to both "the sky" and "explorer' to create a more uniform design
    box-decoration-break: clone;

    //the property above doesn't work with google chrome without -webkit
    -webkit-box-decoration-break: clone;
    &--1 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-secondary-light, 0.85),
        rgba($color-secondary-dark, 0.85)
      );
    }

    //card 2
    &--2 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, 0.85),
        rgba($color-primary-dark, 0.85)
      );
    }

    //card 3
    &--3 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-tertiary-light, 0.85),
        rgba($color-tertiary-dark, 0.85)
      );
    }
  }

  &__details {
    padding: 3rem;
    ul {
      list-style: none;

      //width is 80% because we do not want the lines to go from left to right completely
      width: 80%;
      //we can use absolute positioning to center the list elements, but since it is a block element inside a block element, we can just use margin to center it.
      margin: 0 auto;

      li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem;

        //all elements except the last one will have a border below
        &:not(:last-child) {
          border-bottom: 1px solid $color-grey-light-2;
        }
      }
    }
  }

  //backside styling
  &__cta {
    //centering  the button using the previous trick we used for header. It is very common
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

    //without defining a width it would the button was taking the default width of the container and thus resulting in 2 lines in the button
    width: 90%;

    //but now after we fix the width, the button is not in the center anymore, so we can use text-align on button to center it
    text-align: center;
  }

  &__price-box {
    text-align: center;
    color: $color-white;
    margin-bottom: 8rem;
  }

  &__price-only {
    font-size: 1.4rem;
    text-transform: uppercase;
  }

  &__price-value {
    font-size: 6rem;
    font-weight: 100;
  }

  //mq for redesigning the card for smaller screens
  //respond is not a complete media query so we cannot add more than one condition to it. We want to check here whether our device supports hover feature, so we'll have to use a real media query here.
  //@include respond(tab-port) {

  @media only screen and (max-width: 56.25em), only screen and (hover: none) {
    height: auto;
    border-radius: 3px;
    background-color: $color-white;
    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15);

    &__side {
      height: auto;
      position: relative;
      box-shadow: none;

      &--back {
        transform: rotateY(0);
        clip-path: polygon(0 15%, 100% 0, 100% 100%, 0 100%);
      }
    }

    &:hover &__side--front {
      transform: rotateY(0);
    }

    &__details {
      padding: 1rem 3rem;
    }

    //backside styling
    &__cta {
      //centering  the button using the previous trick we used for header. It is very common
      position: relative;
      top: 0;
      left: 0;
      transform: translate(0);
      width: 100%;
      padding: 7rem 4rem 4rem 4rem;
    }

    &__price-box {
      margin-bottom: 3rem;
    }

    &__price-value {
      font-size: 4rem;
    }
  }
}

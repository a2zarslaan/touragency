.popup {
  height: 100vh;
  width: 100%;
  background-color: rgba($color-black, 0.8);
  position: fixed;
  top: 0;
  left: 0;
  z-index: 9999;

  //for hiding the popup initially -
  //we cannot add animations if the popup is hidden, so we'll turn opacity down and turn visibility to hidden
  //display: none;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s;

  //backdrop filter needs prefix to work with safari, it doesn't work with chrome for now
  //-webkit-backdrop-filter: blur(10px);
  //adding an unprefixed version just in case it starts working in the future without prefix
  //backdrop-filter: blur(10px);

  //writing the above code block using @supports
  @supports (backdrop-filter: blur(10px)) or
    (-webkit-backdrop-filter: blur(10px)) {
    -webkit-backdrop-filter: blur(10px);
    backdrop-filter: blur(10px);
    background-color: rgba($color-black, 0.3);
  }

  &__content {
    // using mixin for absolute positioning
    @include absCenter;
    width: 75%;
    background-color: $color-white;
    box-shadow: 0 2rem 4rem rgba($color-black, 0.15);
    border-radius: 3px;
    display: table;
    overflow: hidden;

    //for the zoom in effect, the initial state is written below with opacity and transform properties
    opacity: 0;
    //we can have only one transform property per element, and there was one transform inside the mixin included above. So to overcome this, we'll have to re-add the translate here so that the mixin one doesn't overwrite the whole transform property as opposed to what we are trying to do
    transform: translate(-50%, -50%) scale(0.25);

    //the zoom in effect won't work without transition. We're delaying the transition by 0.2s too here
    transition: all 0.4s 0.2s;
  }

  &__left {
    width: 33.3333%;

    //we can use float:left to make the left and right section stay side by side of each other. But that will cause both sections to have height according to the amount of content they have instead of having equal height, which will make ogranising them visually, difficult. So we'll use a different technique here, using table cells to create the boxes of same height side by side. We'll have to give the parent a display property of table for this to work. Here content is the parent element according to the HTML structure
    //float: left;
    display: table-cell;
  }

  &__right {
    width: 66.6667%;

    //using table cells to create the boxes of same height side by side. We'll have to give the parent a display property of table for this to work. Here content is the parent element according to the HTML structure
    display: table-cell;

    // using a table property to align the contents
    vertical-align: middle;
    padding: 3rem 5rem;
  }

  &__img {
    display: block;
    width: 100%;
  }

  &__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;

    //using column layout to split text into 2 columns. It's  a relatively new CSS property
    column-count: 2;

    //default column gap is 1em, not rem. em means the font-size relative to the font-size of the element we are working on currently, that is 14 pix here. Rem would be the font-size wrt the font size for the body
    column-gap: 4rem;

    //used to separate the columns
    column-rule: 1px solid $color-grey-light-2;

    // -moz prefix version of the column properties above
    -moz-column-count: 2;
    -moz-column-gap: 4rem;
    -moz-column-rule: 1px solid $color-grey-light-2;

    //adds hyphens wherever there's a paragraph break and the word is incomplete, instead of writing the whole word in the next line. But this property needs a lot of prefixes to work in older browsers
    hyphens: auto;
    -moz-hyphens: auto; //for mozilla
    -ms-hyphens: auto; //for microsoft/edge
    -webkit-hyphens: auto; //for chrome and safari
  }

  //when the button is clicked, this section becomes a target, so we'll use target pseudo-class to deal with it
  &:target {
    opacity: 1;
    visibility: visible;
  }

  //to create a zoom in effect whenever the popup opens
  &:target &__content {
    //final state for the popup is defined below with new opacity and transform
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }

  &__close {
    &:link,
    &:visited {
      color: $color-grey-dark;
      //we don't need to specify a position proerty for its parent separately because this absolute position would be wrt its first positioned parent, that is the popup__content, according to the HTMl structure. So this element will be positioned relative  to the popup__content position
      position: absolute;
      top: 2.5rem;
      right: 2.5rem;
      font-size: 3rem;
      text-decoration: none;
      display: inline-block;
      transition: all 0.2s;

      //the X symbol was taking more height then required so :hover was wor king even when the pointer is not directly on top of it, we fixed it by giving the element a lsmall ine height
      line-height: 1;
    }

    //to turn the close button (X) green when the user hovers on it
    &:hover {
      color: $color-primary;
    }
  }
}

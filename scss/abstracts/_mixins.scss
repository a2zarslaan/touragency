//creating a clearfix mixin to handle the collapsing elements where all child elements are floating
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// mixin for absolute positioning. It was introduced in the code much later so we can still find this code snippet in some places in the codebase. This one is used in _popup partial for the first time
@mixin absCenter {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

//media query manager. Accoridng to our lecture titled "Mobile-First vs Desktop-First", we define breakpoint ranges. We're using a desktop first approach here. We can write them down here -
/*
  0-600px       Phone
  600-900px     Tablet Portrait
  900-1200px    Tablet Landscape
  [1200-1800px] This is where our normal styles apply
  1800px+       Big Desktop

  We'll write max-width media queries for the ranges lower than our normal working range and min-width for ranges more than our normal working range 


  $breakpoint argument choices
  - phone
  - tab-port
  - tab-land
  - big-desktop

  ORDER: Base + Typography > General layout (eg header, footer, nav etc.) + Grid > Page layout > Components  

  we'll be using ems for media queries because rems behave weirdly for media queries. 
  1em = 16px
*/
@mixin respond($breakpoint) {
  @if $breakpoint == phone {
    //if the breakpoint is equal to phone, we'll use the following media query. Here the max-width was 600px, but since we're using the relative units (ems), we'll divide the max-width by the size of 1 em, ie 600/16 = 37.5
    @media (max-width: 37.5em) {
      @content;
    }
  }

  @if $breakpoint == tab-port {
    //if the breakpoint is equal to phone, we'll use the following media query. Here the max-width was 900px, but since we're using the relative units (ems), we'll divide the max-width by the size of 1 em, ie 900/16 = 56.25
    @media (max-width: 56.25em) {
      @content;
    }
  }

  @if $breakpoint == tab-land {
    //if the breakpoint is equal to phone, we'll use the following media query. Here the max-width was 1200px, but since we're using the relative units (ems), we'll divide the max-width by the size of 1 em, ie 1200/16 = 75
    @media (max-width: 75em) {
      @content;
    }
  }

  @if $breakpoint == big-desktop {
    //if the breakpoint is equal to phone, we'll use the following media query. Here the max-width was 1800px, but since we're using the relative units (ems), we'll divide the max-width by the size of 1 em, ie 1800/16 = 112.5
    @media (min-width: 112.5em) {
      @content;
    }
  }
}
